<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.astraapi.repository.TestingRepository">
    <insert id="save" useGeneratedKeys="true" keyColumn="id" keyProperty="entity.id">
        insert into public.testings(exam_id, specialization_id, status)
        values (#{entity.examId}, #{entity.specializationId}, #{entity.status})
    </insert>

    <select id="getByExamIdWithSpecialization" resultMap="testingWithSpecialization">
        select t.id       as id,
               t.exam_id  as examId,
               t.status   as status,
               s.id       as specializationId,
               s.title    as specializationTitle,
               step.id    as stepId,
               step.title as stepTitle
        from public.testings t
                 left join public.specializations s on s.id = t.specialization_id
                 left join public.steps step on step.id = s.step_id
        where t.exam_id = #{examId}
        order by t.id
    </select>

    <select id="findTestingInfoById" resultMap="testingInfo">
        select t.id              as id,
               t.status          as status,
               e.id              as examId,
               e.title           as examTitle,
               s.id              as specializationId,
               s.title           as specializationTitle,
               stats.tests_count as testsCount
        from public.testings t
                 left join public.exams e on e.id = t.exam_id
                 left join public.specializations s on s.id = t.specialization_id
                 left join lateral (
            select count(tt.test_id) as tests_count from public.testings_tests tt where tt.testing_id = t.id
            ) stats on true
        where t.id = #{id}
    </select>

    <select id="getTestingTestsByTestingId" resultMap="testingPage">
        select tt.id                as id,
               tt.testing_id        as testingId,
               t.id                 as testId,
               t.question           as testQuestion,
               count(t.id) over ()  as rows,
               #{pageable.pageSize} as pageSize
        from public.testings_tests tt
                 left join public.tests t on t.id = tt.test_id
        where tt.testing_id = #{testingId}
          and (#{searchText}::text is null or t.question ilike concat('%', #{searchText}::text, '%'))
        order by tt.id desc
        offset #{pageable.offset} limit #{pageable.pageSize}
    </select>

    <select id="getAvailable" resultMap="testingWithExamAndSubject">
        select t.id              as id,
               e.id              as examId,
               e.title           as examTitle,
               s.id              as specializationId,
               s.title           as specializationTitle,
               count(tt.test_id) as testsCount
        from public.testings t
                 left join public.exams e on e.id = t.exam_id
                 left join public.specializations s on s.id = t.specialization_id
                 left join public.testings_tests tt on t.id = tt.testing_id
        where t.status = 'ACTIVE'
        group by t.id, e.id, s.id
        having count(tt.test_id) > 0
        order by e.id, s.id
    </select>

    <select id="getByExamIdAndSpecializationId" resultType="com.example.astraapi.entity.TestingEntity">
        select *
        from public.testings t
        where t.exam_id = #{examId}
          and t.specialization_id = #{specializationId}
    </select>

    <select id="getTestsCount" resultType="java.lang.Long">
        select count(id)
        from public.testings_tests tt
        where tt.testing_id = #{id}
    </select>

    <update id="updateStatusById">
        update public.testings
        set status = #{status}
        where id = #{id}
    </update>

    <select id="getRedundantTestings" resultMap="testingInfo">
        select t.id as id,
        t.status as status,
        e.id as examId,
        e.title as examTitle,
        spec.id as specializationId,
        spec.title as specializationTitle,
        s.id as stepId,
        s.title as stepTitle
        from public.testings t
        left join public.exams e on e.id = t.exam_id
        left join public.specializations spec on spec.id = t.specialization_id
        left join public.steps s on s.id = spec.step_id
        where exists (select 1 from public.testings_tests tt where tt.test_id = #{testId} and tt.testing_id = t.id) and
        t.specialization_id not in (
        select sub.specialization_id from public.subjects sub where
        <choose>
            <when test="subjectsIds.isEmpty()">
                false
            </when>
            <otherwise>
                sub.id in (
                <foreach collection="subjectsIds" item="subjectId" separator=",">
                    #{subjectId}
                </foreach>
                )
            </otherwise>
        </choose>
        )
        order by e.title, s.title, spec.title
    </select>

    <select id="existsByIdAndStatus" resultType="boolean">
        select exists(
                       select 1 from public.testings t where t.id = #{id} and t.status = #{status}
                   )
    </select>

    <resultMap id="testingWithSpecialization" type="com.example.astraapi.entity.TestingWithSpecializationEntity">
        <id column="id" property="id"/>
        <result column="examId" property="examId"/>
        <result column="status" property="status"/>

        <association property="specialization"
                     javaType="com.example.astraapi.entity.projection.StepSpecializationProjection">
            <id column="specializationId" property="id"/>
            <result column="specializationTitle" property="title"/>

            <association property="step" javaType="com.example.astraapi.entity.StepEntity">
                <id column="stepId" property="id"/>
                <result column="stepTitle" property="title"/>
            </association>
        </association>
    </resultMap>

    <resultMap id="testingInfo" type="com.example.astraapi.entity.projection.TestingInfoProjection">
        <id column="id" property="id"/>
        <result column="testsCount" property="testsCount"/>
        <result column="status" property="status"/>

        <association property="exam" javaType="com.example.astraapi.entity.ExamEntity">
            <id column="examId" property="id"/>
            <result column="examTitle" property="title"/>
        </association>

        <association property="specialization"
                     javaType="com.example.astraapi.entity.projection.StepSpecializationProjection">
            <id column="specializationId" property="id"/>
            <result column="specializationTitle" property="title"/>

            <association property="step" javaType="com.example.astraapi.entity.StepEntity">
                <id column="stepId" property="id"/>
                <result column="stepTitle" property="title"/>
            </association>
        </association>
    </resultMap>

    <resultMap id="testingPage" type="com.example.astraapi.model.TestingPage">
        <result property="rows" column="rows"/>
        <result property="pageSize" column="pageSize"/>
        <result property="testingId" column="testingId"/>
        <collection property="items"
                    javaType="java.util.List"
                    ofType="com.example.astraapi.entity.projection.TestingTestSimpleProjection"
                    resultMap="testingTestQuestion"/>
    </resultMap>

    <resultMap id="testingTestQuestion" type="com.example.astraapi.entity.projection.TestingTestSimpleProjection">
        <id column="testId" property="testId"/>
        <result column="id" property="testingTestId"/>
        <result column="testQuestion" property="question"/>
    </resultMap>

    <resultMap id="testingWithExamAndSubject" type="com.example.astraapi.entity.TestingEntity">
        <id column="id" property="id"/>

        <association property="exam" javaType="com.example.astraapi.entity.ExamEntity">
            <id column="examId" property="id"/>
            <result column="examTitle" property="title"/>
        </association>

        <association property="specialization" javaType="com.example.astraapi.entity.SpecializationEntity">
            <id column="specializationId" property="id"/>
            <result column="specializationTitle" property="title"/>
        </association>
    </resultMap>
</mapper>
