<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.astraapi.repository.ExaminationStatisticRepository">
    <select id="calculateStatistic" resultType="com.example.astraapi.entity.projection.ExaminationStatisticProjection">
        select sum(case when sub.is_correct then 1 else 0 end) as correctCount,
               count(ea.id)                                    as totalCount
        from public.examinations_answers ea
                 left join lateral (
            select tv.is_correct from tests_variants tv where tv.id = ea.variant_id
            ) as sub on true
        where examination_id = #{examinationId}
    </select>

    <select id="findByUserIdAndTestingId" resultType="com.example.astraapi.entity.ExaminationStatisticEntity">
        select *
        from public.examinations_statistics es
        where es.user_id = #{userId}
          and es.testing_id = #{testingId}
    </select>

    <insert id="save" useGeneratedKeys="true" keyColumn="id" keyProperty="entity.id">
        insert into public.examinations_statistics(testing_id, user_id, last_percentage, best_percentage)
        values (#{entity.testingId},
                #{entity.userId},
                #{entity.lastPercentage},
                #{entity.bestPercentage})
    </insert>

    <update id="updatePercentage">
        update public.examinations_statistics
        set last_percentage = #{entity.lastPercentage},
            best_percentage = #{entity.bestPercentage}
        where id = #{entity.id}
    </update>

    <select id="getAllWithTestingByUserId" resultMap="statisticInfo">
        select t.id                as testingId,
               exam.id             as examId,
               exam.title          as examTitle,
               s.id                as specializationId,
               s.title             as specializationTitle,
               ts.lastCorrectCount as lastCorrectCount,
               ts.lastTotalCount   as lastTotalCount,
               ts.bestCorrectCount as bestCorrectCount,
               ts.bestTotalCount   as bestTotalCount
        from public.testings t
                 left join public.exams exam on exam.id = t.exam_id
                 left join public.specializations s on s.id = t.specialization_id
                 left join lateral (
            with stats as (select sum(case when sub.is_correct then 1 else 0 end) as correctCount,
                                  count(ea.id)                                    as totalCount,
                                  e.finished_at                                   as finishedAt
                           from public.examinations_answers ea
                                    left join lateral (
                               select tv.is_correct from tests_variants tv where tv.id = ea.variant_id
                               ) as sub on true
                                    left join examinations e on e.id = ea.examination_id
                           where e.user_id = #{userId}
          <![CDATA[
                             and e.finished_at < now()
          ]]>
        and e.testing_id = t.id
                           group by e.id, e.finished_at
                           order by e.finished_at desc)
            select correctness.last[1] as lastCorrectCount,
                   correctness.last[2] as lastTotalCount,
                   correctness.best[1] as bestCorrectCount,
                   correctness.best[2] as bestTotalCount
            from (select (select array [stats.correctCount, stats.totalCount] as rw from stats limit 1) as last,
                         (select array [s.correctCount, s.totalCount] best
                          from stats s
                          where round(correctCount * 1.0 / totalCount, 2) =
                                (select max(round(ns.correctCount * 1.0 / ns.totalCount, 2))
                                 from stats ns))                                                        as best) correctness
            ) as ts on true
        where ts.lastTotalCount is not null;
    </select>

    <select id="getStepsStatisticByUserId" resultMap="stepStatistic">
        select s.id         as stepId,
               s.title      as stepTitle,
               spec.id      as specializationId,
               spec.title   as specializationTitle,
               sub.id       as subjectId,
               sub.title    as subjectTitle,
               stat.correct as correctCount,
               stat.total   as totalCount
        from public.subjects sub
                 left join public.specializations spec on spec.id = sub.specialization_id
                 left join public.steps s on s.id = spec.step_id
                 join lateral (
            select coalesce(sum(case when is_correct THEN 1 ELSE 0 END), 0) as correct,
                   coalesce(sum(1), 0)                                      as total
            from (select distinct on (ea.test_id) ea.test_id    as test_id,
                                                  tv.is_correct as is_correct,
                                                  rank() over (
                                                      partition by ea.test_id
                                                      order by e.finished_at
                                                      )            rank_number
                  from public.examinations_answers ea
                           left join public.examinations e on e.id = ea.examination_id
                           left join tests_subjects ts on ea.test_id = ts.test_id
                           left join tests_variants tv on ea.variant_id = tv.id and tv.test_id = ea.test_id
                  where ts.subject_id = sub.id
                    and e.user_id = #{userId}
                  order by ea.test_id, rank_number desc) as nested
            ) as stat on true
        where stat.total > 0
        order by s.title, spec.title, sub.title;
    </select>

    <resultMap id="statisticInfo" type="com.example.astraapi.entity.ExaminationStatisticInfoEntity">
        <id column="testingId"/>
        <result column="lastCorrectCount" property="lastCorrectCount"/>
        <result column="lastTotalCount" property="lastTotalCount"/>
        <result column="bestCorrectCount" property="bestCorrectCount"/>
        <result column="bestTotalCount" property="bestTotalCount"/>

        <association property="testing" resultMap="testingInfo"/>
    </resultMap>

    <resultMap id="testingInfo" type="com.example.astraapi.entity.TestingInfoEntity">
        <id column="testingId" property="id"/>

        <association property="exam" javaType="com.example.astraapi.entity.ExamEntity">
            <id column="examId" property="id"/>
            <result column="examTitle" property="title"/>
        </association>

        <association property="specialization" javaType="com.example.astraapi.entity.SpecializationEntity">
            <id column="specializationId" property="id"/>
            <result column="specializationTitle" property="title"/>
        </association>
    </resultMap>

    <resultMap id="stepStatistic" type="com.example.astraapi.entity.projection.StepStatisticProjection">
        <id column="stepId" property="id"/>
        <result column="stepTitle" property="title"/>

        <collection property="specializations" javaType="List"
                    ofType="com.example.astraapi.entity.projection.SpecializationStatisticProjection">
            <id column="specializationId" property="id"/>
            <result column="specializationTitle" property="title"/>

            <collection property="subjects" javaType="List"
                        ofType="com.example.astraapi.entity.projection.SubjectStatisticProjection">
                <id column="subjectId" property="id"/>
                <result column="subjectTitle" property="title"/>
                <result column="correctCount" property="correctCount"/>
                <result column="totalCount" property="totalCount"/>
            </collection>
        </collection>
    </resultMap>
</mapper>
