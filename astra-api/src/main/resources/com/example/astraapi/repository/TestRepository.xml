<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.astraapi.repository.TestRepository">
    <insert id="save" parameterType="com.example.astraapi.entity.TestEntity" useGeneratedKeys="true"
            keyProperty="entity.id">
        insert into public.tests(question, comment, question_svg, comment_svg, status)
        values (#{entity.question}, #{entity.comment}, #{entity.questionSvg}, #{entity.commentSvg}, #{entity.status})
    </insert>

    <update id="update">
        update public.tests
        set question     = #{entity.question},
            comment      = #{entity.comment},
            question_svg = #{entity.questionSvg},
            comment_svg  = #{entity.commentSvg},
            status       = #{entity.status}
        where id = #{entity.id}
    </update>

    <select id="existsByIdAndStatus" resultType="java.lang.Boolean">
        select exists(
                       select 1 from public.tests t where t.id = #{id} and t.status = #{status}
                   )
    </select>

    <select id="getAll" resultMap="testPage">
        select nested.id            as id,
               nested.question      as question,
               nested.comment       as comment,
               nested.status        as status,
               nested.createdDate   as createdDate,
               #{pageable.pageSize} as pageSize,
               nested.rows          as rows,
               spec.id              as specializationId,
               spec.title           as specializationTitle
        from (select t.id                as id,
                     t.question          as question,
                     t.comment           as comment,
                     t.status            as status,
                     t.created_date      as createdDate,
                     count(t.id) over () as rows
              from public.tests t
              where (cast(#{status} as varchar) is null or t.status = cast(#{status} as varchar))
                and (cast(#{searchText} as varchar) is null or
                     t.question ilike concat('%', #{searchText}::varchar, '%') or
                     t.comment ilike concat('%', #{searchText}::varchar, '%') or exists(select 1
                                                                                        from public.tests_variants tv
                                                                                        where tv.test_id = t.id
                                                                                          and (tv.title ilike
                                                                                               concat('%', #{searchText}::varchar, '%') or
                                                                                               tv.explanation ilike
                                                                                               concat('%', #{searchText}::varchar, '%'))))
                and (#{importId}::bigint is null or
                     exists(select 1
                            from public.import_tests it
                            where it.import_id = #{importId}::bigint
                              and it.test_id = t.id))
              order by id
              offset #{pageable.offset} limit #{pageable.pageSize}) as nested
                 left join public.tests_subjects ts on nested.id = ts.test_id
                 left join public.subjects sub on sub.id = ts.subject_id
                 left join public.specializations spec on spec.id = sub.specialization_id
        order by nested.id
    </select>

    <select id="getDetailedTestById" resultMap="testFullDetail">
        select t.id               as id,
               t.question         as question,
               t.question_svg     as questionSvg,
               t.comment          as comment,
               t.comment_svg      as commentSvg,
               t.status           as status,
               t.created_date     as createdDate,
               tv.id              as variantId,
               tv.title           as variantTitle,
               tv.title_svg       as variantTitleSvg,
               tv.explanation     as variantExplanation,
               tv.explanation_svg as variantExplanationSvg,
               tv.is_correct      as variantIsCorrect,
               s.id               as subjectId,
               s.title            as subjectTitle,
               sub_spec.id        as subjectSpecializationId,
               sub_spec.title     as subjectSpecializationTitle,
               sub_step.id        as subjectStepId,
               sub_step.title     as subjectStepTitle,
               testing.id         as testingId,
               testing.status     as testingStatus,
               e.id               as examId,
               e.title            as examTitle,
               exam_spec.id       as examSpecializationId,
               exam_spec.title    as examSpecializationTitle,
               exam_step.id       as examStepId,
               exam_step.title    as examStepTitle,
               it.details         as importDetails
        from public.tests t
                 left join public.tests_variants tv on t.id = tv.test_id
                 left join public.tests_subjects ts on t.id = ts.test_id
                 left join public.subjects s on ts.subject_id = s.id
                 left join public.import_tests it on it.test_id = t.id
                 left join public.testings_tests tt on tt.test_id = t.id
                 left join public.testings testing on testing.id = tt.testing_id
                 left join public.exams e on e.id = testing.exam_id
                 left join public.specializations exam_spec on exam_spec.id = testing.specialization_id
                 left join public.steps exam_step on exam_step.id = exam_spec.step_id
                 left join public.specializations sub_spec on sub_spec.id = s.specialization_id
                 left join public.steps sub_step on sub_step.id = sub_spec.step_id
        where t.id = #{id}
        order by t.id, tv.id
    </select>

    <select id="getTestsByTestingId" resultMap="testingTest">
        select *
        from (select *
              from (select distinct on (t.id) t.id           as id,
                                              t.question     as question,
                                              t.question_svg as questionSvg,
                                              t.comment      as comment,
                                              t.comment_svg  as commentSvg
                    from public.testings
                             left join public.testings_tests tt on testings.id = tt.testing_id
                             left join public.tests t on t.id = tt.test_id
                    where testings.id = #{testingId}
                    order by t.id) as subsubtable
              order by random()
              limit (
                  case
                      when (#{count}::bigint = 0) then null
                      else #{count}
                      end
                  )) as subtable
                 join lateral (
            select tv.id              as variantId,
                   tv.title           as variantTitle,
                   tv.title_svg       as variantTitleSvg,
                   tv.test_id         as variantTestId,
                   tv.explanation     as variantExplanation,
                   tv.explanation_svg as variantExplanationSvg,
                   tv.is_correct      as variantIsCorrect
            from public.tests_variants tv
            where tv.test_id = subtable.id
            order by random()
            ) as variants on true
        order by random()
    </select>

    <select id="getTestsByIds" resultMap="testingTest">
        select
        t.id as id,
        t.question as question,
        t.question_svg as questionSvg,
        tv.id as variantId,
        tv.test_id as variantTestId,
        tv.title as variantTitle,
        tv.title_svg as variantTitleSvg
        from public.tests t
        left join public.tests_variants tv on t.id = tv.test_id
        where t.id in (
        <foreach collection="ids" item="id" separator=",">
            #{id}
        </foreach>
        )
        order by random()
    </select>

    <select id="getNotRelatedTestingTests" resultMap="notRelatedTestsPage">
        select available_tests_page.id       as id,
               available_tests_page.question as question,
               tv.id                         as variantId,
               tv.title                      as variantTitle,
               #{pageable.pageSize}          as pageSize,
               available_tests_page.rows     as rows
        from (select t.id                as id,
                     t.question          as question,
                     count(t.id) over () as rows
              from public.tests t
              where t.status = 'ACTIVE'
                and (#{searchText}::text is null or exists(select 1
                                                           from public.tests_variants tv
                                                           where tv.test_id = t.id
                                                             and tv.title ilike concat('%', #{searchText}::text, '%')) or
                     t.question ilike concat('%', #{searchText}::text, '%'))
                and exists(select 1
                           from public.subjects sub
                           where sub.id in (select ts.subject_id from public.tests_subjects ts where ts.test_id = t.id)
                             and sub.specialization_id =
                                 (select testings.specialization_id
                                  from public.testings
                                  where testings.id = #{testingId}))
                and t.id not in (select tt.test_id from public.testings_tests tt where tt.testing_id = #{testingId})
              order by t.id
              offset #{pageable.offset} limit #{pageable.pageSize}) AS available_tests_page
                 left join public.tests_variants tv on tv.test_id = available_tests_page.id
        order by available_tests_page.id, tv.id
    </select>

    <delete id="deleteById">
        with testId as (
            delete from public.tests where id = #{id} returning id),
             examinationAnswerId as (
                 delete from public.examinations_answers ea where ea.test_id in (select id from testId) returning ea.id),
             importTestId as (
                 delete from public.import_tests it where it.test_id in (select id from testId) returning it.id),
             testVariantId as (
                 delete from public.tests_variants tv where tv.test_id in (select id from testId) returning tv.id),
             testSubjectId as (
                 delete from public.tests_subjects ts where ts.test_id in (select id from testId) returning ts.subject_id),
             testingTestId as (
                 delete from public.testings_tests tt where tt.test_id in (select id from testId) returning tt.id)
        select count(*)
        from testId
    </delete>

    <select id="getExportTests" resultMap="exportTestPage">
        select nested.id            as id,
               nested.question      as question,
               nested.comment       as comment,
               tv.id                as variantId,
               tv.title             as variantTitle,
               tv.explanation       as variantExplanation,
               tv.is_correct        as variantCorrect,
               sub.id               as subjectId,
               sub.title            as subjectTitle,
               spec.id              as specializationId,
               spec.title           as specializationTitle,
               s.id                 as stepId,
               s.title              as stepTitle,
               #{pageable.pageSize} as pageSize,
               nested.rows          as rows
        from (select t.id                as id,
                     t.question          as question,
                     t.comment           as comment,
                     count(t.id) over () as rows
              from public.tests t
              where #{specializationId}::bigint is null
                 or exists(
                      select 1
                      from public.tests_subjects ts
                      where ts.test_id = t.id
                        and exists(
                              select 1
                              from public.subjects s
                              where s.id = ts.subject_id
                                and s.specialization_id = #{specializationId}::bigint
                          )
                  )
              order by id
              offset #{pageable.offset} limit #{pageable.pageSize}) as nested
                 left join public.tests_variants tv on tv.test_id = nested.id
                 left join public.tests_subjects ts on nested.id = ts.test_id
                 left join public.subjects sub on sub.id = ts.subject_id
                 left join public.specializations spec on spec.id = sub.specialization_id
                 left join public.steps s on s.id = spec.step_id
        order by nested.id
    </select>

    <resultMap id="testPage" type="com.example.astraapi.model.Page">
        <result property="rows" column="rows"/>
        <result property="pageSize" column="pageSize"/>
        <collection property="items"
                    javaType="List"
                    ofType="com.example.astraapi.entity.projection.TestShortDetailProjection"
                    resultMap="testShortDetail">
        </collection>
    </resultMap>

    <resultMap id="notRelatedTestsPage" type="com.example.astraapi.model.Page">
        <result property="rows" column="rows"/>
        <result property="pageSize" column="pageSize"/>
        <collection property="items"
                    javaType="List"
                    ofType="com.example.astraapi.entity.TestEntity"
                    resultMap="testWithVariants">
        </collection>
    </resultMap>

    <resultMap id="exportTestPage" type="com.example.astraapi.model.Page">
        <result property="rows" column="rows"/>
        <result property="pageSize" column="pageSize"/>
        <collection property="items"
                    javaType="List"
                    ofType="com.example.astraapi.entity.projection.exporting.ExportTestProjection"
                    resultMap="exportTest">
        </collection>
    </resultMap>

    <resultMap id="testShortDetail" type="com.example.astraapi.entity.projection.TestShortDetailProjection">
        <id column="id" property="id"/>
        <result column="question" property="question"/>
        <result column="comment" property="comment"/>
        <result column="status" property="status"/>
        <result column="createdDate" property="createdDate"/>
        <collection property="specializations" javaType="List"
                    ofType="com.example.astraapi.entity.SpecializationEntity">
            <id column="specializationId" property="id"/>
            <result column="specializationTitle" property="title"/>
        </collection>
    </resultMap>

    <resultMap id="exportTest" type="com.example.astraapi.entity.projection.exporting.ExportTestProjection">
        <id column="id"/>
        <result column="question" property="question"/>
        <result column="comment" property="comment"/>

        <collection property="variants" javaType="java.util.List"
                    ofType="com.example.astraapi.entity.projection.exporting.ExportTestVariantProjection">
            <id column="variantId"/>
            <result column="variantTitle" property="title"/>
            <result column="variantExplanation" property="explanation"/>
            <result column="variantCorrect" property="correct"/>
        </collection>

        <collection property="subjects" javaType="java.util.List"
                    ofType="com.example.astraapi.entity.projection.exporting.ExportSubjectProjection">
            <id column="subjectId"/>
            <result column="subjectTitle" property="title"/>
            <result column="specializationTitle" property="specializationTitle"/>
            <result column="stepTitle" property="stepTitle"/>
        </collection>
    </resultMap>

    <resultMap id="testFullDetail" type="com.example.astraapi.entity.TestFullDetailEntity">
        <id column="id" property="id"/>
        <result column="question" property="question"/>
        <result column="questionSvg" property="questionSvg"/>
        <result column="comment" property="comment"/>
        <result column="commentSvg" property="commentSvg"/>
        <result column="status" property="status"/>
        <result column="createdDate" property="createdDate"/>
        <result column="importDetails" property="importDetails" jdbcType="OTHER"
                typeHandler="com.example.astraapi.config.JsonTypeHandler"/>

        <collection property="variants" javaType="List" ofType="com.example.astraapi.entity.TestVariantEntity">
            <id column="variantId" property="id"/>
            <result column="variantTitle" property="title"/>
            <result column="variantTitleSvg" property="titleSvg"/>
            <result column="variantExplanation" property="explanation"/>
            <result column="variantExplanationSvg" property="explanationSvg"/>
            <result column="variantIsCorrect" property="correct"/>
        </collection>

        <collection property="testings" javaType="List" ofType="com.example.astraapi.entity.projection.TestingInfoProjection">
            <id column="testingId" property="id"/>
            <result column="testingStatus" property="status" />

            <association property="exam" javaType="com.example.astraapi.entity.ExamEntity">
                <id column="examId" property="id"/>
                <result column="examTitle" property="title"/>
            </association>

            <association property="specialization"
                         javaType="com.example.astraapi.entity.projection.StepSpecializationProjection">
                <id column="examSpecializationId" property="id"/>
                <result column="examSpecializationTitle" property="title"/>

                <association property="step" javaType="com.example.astraapi.entity.StepEntity">
                    <id column="examStepId" property="id"/>
                    <result column="examStepTitle" property="title"/>
                </association>
            </association>
        </collection>

        <collection property="subjects" javaType="List"
                    ofType="com.example.astraapi.entity.projection.SubjectDetailProjection">
            <id column="subjectId" property="id"/>
            <result column="subjectTitle" property="title"/>

            <association property="specialization"
                         javaType="com.example.astraapi.entity.projection.StepSpecializationProjection">
                <id column="subjectSpecializationId" property="id"/>
                <result column="subjectSpecializationTitle" property="title"/>

                <association property="step" javaType="com.example.astraapi.entity.StepEntity">
                    <id column="subjectStepId" property="id"/>
                    <result column="subjectStepTitle" property="title"/>
                </association>
            </association>
        </collection>
    </resultMap>

    <resultMap id="testingTest" type="com.example.astraapi.entity.TestFullDetailEntity">
        <id column="id" property="id"/>
        <result column="question" property="question"/>
        <result column="questionSvg" property="questionSvg"/>
        <result column="comment" property="comment"/>
        <result column="commentSvg" property="commentSvg"/>

        <collection property="variants" javaType="List" ofType="com.example.astraapi.entity.TestVariantEntity">
            <id column="variantId" property="id"/>
            <result column="variantTestId" property="testId"/>
            <result column="variantTitle" property="title"/>
            <result column="variantTitleSvg" property="titleSvg"/>
            <result column="variantExplanation" property="explanation"/>
            <result column="variantExplanationSvg" property="explanationSvg"/>
            <result column="variantIsCorrect" property="correct"/>
        </collection>
    </resultMap>

    <resultMap id="testWithVariants" type="com.example.astraapi.entity.TestEntity">
        <id column="id" property="id"/>
        <result column="question" property="question"/>

        <collection property="variants" javaType="java.util.List"
                    ofType="com.example.astraapi.entity.TestVariantEntity">
            <id column="variantId" property="id"/>
            <result column="variantTitle" property="title"/>
        </collection>
    </resultMap>
</mapper>
