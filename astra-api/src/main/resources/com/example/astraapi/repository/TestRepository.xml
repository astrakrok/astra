<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.astraapi.repository.TestRepository">
    <insert id="save" parameterType="com.example.astraapi.entity.TestEntity" useGeneratedKeys="true"
            keyProperty="entity.id">
        insert into public.tests(question, comment, question_svg, comment_svg)
        values (#{entity.question}, #{entity.comment}, #{entity.questionSvg}, #{entity.commentSvg})
    </insert>

    <update id="update">
        update public.tests
        set question     = #{entity.question},
            comment      = #{entity.comment},
            question_svg = #{entity.questionSvg},
            comment_svg  = #{entity.commentSvg}
        where id = #{entity.id}
    </update>

    <select id="getAll" resultMap="testPage">
        select nested.id       as id,
               nested.question as question,
               nested.comment  as comment,
               nested.rows     as rows,
               s.id            as specializationId,
               s.title         as specializationTitle
        from (
                 select t.id                as id,
                        t.question          as question,
                        t.comment           as comment,
                        count(t.id) over () as rows
                 from public.tests t
                 order by id
                 offset #{pageable.offset} limit #{pageable.pageSize}
             ) as nested
                 left join public.tests_subjects ts on nested.id = ts.test_id
                 left join public.subjects_specializations ss on ts.subject_id = ss.subject_id
                 left join public.specializations s on ss.specialization_id = s.id
        order by nested.id
    </select>

    <select id="getDetailedTestById" resultMap="testFullDetail">
        select t.id               as id,
               t.question         as question,
               t.question_svg     as questionSvg,
               t.comment          as comment,
               t.comment_svg      as commentSvg,
               tv.id              as variantId,
               tv.title           as variantTitle,
               tv.title_svg       as variantTitleSvg,
               tv.explanation     as variantExplanation,
               tv.explanation_svg as variantExplanationSvg,
               tv.is_correct      as variantIsCorrect,
               s.id               as subjectId,
               s.title            as subjectTitle
        from public.tests t
                 left join public.tests_variants tv on t.id = tv.test_id
                 left join public.tests_subjects ts on t.id = ts.test_id
                 left join public.subjects s on ts.subject_id = s.id
        where t.id = #{id}
        order by t.id, tv.id
    </select>

    <select id="getTestsByTestingId" resultMap="testingTest">
        select *
        from (
                 select *
                 from (
                          select distinct on (t.id) t.id           as id,
                                                    t.question     as question,
                                                    t.question_svg as questionSvg,
                                                    t.comment      as comment,
                                                    t.comment_svg  as commentSvg
                          from public.testings
                                   left join public.testings_tests tt on testings.id = tt.testing_id
                                   left join public.tests t on t.id = tt.test_id
                          where testings.id = #{testingId}
                          order by t.id
                      ) as subsubtable
                 order by random()
                 limit #{count}
             ) as subtable
                 join lateral (
            select tv.id              as variantId,
                   tv.title           as variantTitle,
                   tv.title_svg       as variantTitleSvg,
                   tv.test_id         as variantTestId,
                   tv.explanation     as variantExplanation,
                   tv.explanation_svg as variantExplanationSvg,
                   tv.is_correct      as variantIsCorrect
            from public.tests_variants tv
            where tv.test_id = subtable.id
            order by random()
            ) as variants on true
        order by random()
    </select>

    <select id="getTestsByIds" resultMap="testingTest">
        select
        t.id as id,
        t.question as question,
        t.question_svg as questionSvg,
        tv.id as variantId,
        tv.test_id as variantTestId,
        tv.title as variantTitle,
        tv.title_svg as variantTitleSvg
        from public.tests t
        left join public.tests_variants tv on t.id = tv.test_id
        where t.id in (
        <foreach collection="ids" item="id" separator=",">
            #{id}
        </foreach>
        )
        order by random()
    </select>

    <select id="getNotRelatedTestingTests" resultMap="testWithVariants">
        select distinct t.id       as id,
                        t.question as question,
                        tv.id      as variantId,
                        tv.title   as variantTitle
        from public.tests t
                 left join tests_subjects ts on t.id = ts.test_id
                 left join subjects_specializations ss on ts.subject_id = ss.subject_id
                 left join tests_variants tv on t.id = tv.test_id
        where specialization_id = (
            select specialization_id
            from public.testings
            where testings.id = #{testingId}
        )
          and t.id not in (
            select tt.test_id
            from public.testings_tests tt
            where tt.testing_id = #{testingId}
        )
        order by id, variantId
    </select>

    <resultMap id="testShortDetail" type="com.example.astraapi.entity.TestShortDetailEntity">
        <id column="id" property="id"/>
        <result column="question" property="question"/>
        <result column="comment" property="comment"/>
        <collection property="specializations" javaType="List"
                    ofType="com.example.astraapi.entity.SpecializationEntity">
            <id column="specializationId" property="id"/>
            <result column="specializationTitle" property="title"/>
        </collection>
    </resultMap>

    <resultMap id="testPage" type="com.example.astraapi.model.Page">
        <result property="rows" column="rows"/>
        <collection property="items"
                    javaType="List"
                    ofType="com.example.astraapi.entity.TestShortDetailEntity"
                    resultMap="testShortDetail">
        </collection>
    </resultMap>

    <resultMap id="testFullDetail" type="com.example.astraapi.entity.TestFullDetailEntity">
        <id column="id" property="id"/>
        <result column="question" property="question"/>
        <result column="questionSvg" property="questionSvg"/>
        <result column="comment" property="comment"/>
        <result column="commentSvg" property="commentSvg"/>

        <collection property="variants" javaType="List" ofType="com.example.astraapi.entity.TestVariantEntity">
            <id column="variantId" property="id"/>
            <result column="variantTitle" property="title"/>
            <result column="variantTitleSvg" property="titleSvg"/>
            <result column="variantExplanation" property="explanation"/>
            <result column="variantExplanationSvg" property="explanationSvg"/>
            <result column="variantIsCorrect" property="correct"/>
        </collection>

        <collection property="exams" javaType="List" ofType="com.example.astraapi.entity.ExamEntity">
            <id column="examId" property="id"/>
            <result column="examTitle" property="title"/>
        </collection>

        <collection property="subjects" javaType="List" ofType="com.example.astraapi.entity.SubjectEntity">
            <id column="subjectId" property="id"/>
            <result column="subjectTitle" property="title"/>
        </collection>
    </resultMap>

    <resultMap id="testingTest" type="com.example.astraapi.entity.TestFullDetailEntity">
        <id column="id" property="id"/>
        <result column="question" property="question"/>
        <result column="questionSvg" property="questionSvg"/>
        <result column="comment" property="comment"/>
        <result column="commentSvg" property="commentSvg"/>

        <collection property="variants" javaType="List" ofType="com.example.astraapi.entity.TestVariantEntity">
            <id column="variantId" property="id"/>
            <result column="variantTestId" property="testId"/>
            <result column="variantTitle" property="title"/>
            <result column="variantTitleSvg" property="titleSvg"/>
            <result column="variantExplanation" property="explanation"/>
            <result column="variantExplanationSvg" property="explanationSvg"/>
            <result column="variantIsCorrect" property="correct"/>
        </collection>
    </resultMap>

    <resultMap id="testWithVariants" type="com.example.astraapi.entity.TestEntity">
        <id column="id" property="id"/>
        <result column="question" property="question"/>

        <collection property="variants" javaType="java.util.List"
                    ofType="com.example.astraapi.entity.TestVariantEntity">
            <id column="variantId" property="id"/>
            <result column="variantTitle" property="title"/>
        </collection>
    </resultMap>
</mapper>
